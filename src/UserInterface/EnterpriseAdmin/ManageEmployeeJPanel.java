/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package UserInterface.EnterpriseAdmin;
import Business.Employee.Employee;
import Business.Enterprise.Enterprise;
import Business.Enterprise.MedicalHelpEnterprise;
import Business.Enterprise.SafetyEnterprise;
import Business.Enterprise.UtilityManagementEnterprise;
import Business.Organization.Organization;
import Business.Organization.OrganizationDirectory;
import Business.Role.ClinicManagerRole;
import Business.Role.DisasterManagementEmployeeRole;
import Business.Role.DisasterManagementManagerRole;
import Business.Role.DoctorRole;
import Business.Role.DrinkingWaterManagerRole;
import Business.Role.DrinkingWaterSupplyWorker;
import Business.Role.ElectricityMaintainanceEmployeeRole;
import Business.Role.ElectricityMaintainanceManagerRole;
import Business.Role.GovernmentManagerRole;
import Business.Role.NGOManagerRole;
import Business.Role.Role;
import Business.Role.SecurityDepartmentHeadRole;
import Business.Role.SecurityGuardRole;
import Business.Role.TrashRemovalManRole;
import Business.Role.TrashRemovalManagerRole;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;


import Business.UserAccount.UserAccount;
import Business.UserAccount.UserAccountDirectory;
import java.awt.CardLayout;
import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.BorderFactory;
import javax.swing.JOptionPane;
/**
 *
 * @author adepu
 */
public class ManageEmployeeJPanel extends javax.swing.JPanel {

    /**
     * Creates new form ManageEmployee
     */
    private Enterprise enterprise;
    private JPanel userProcessContainer;
    private OrganizationDirectory organizationDirectory;
    DefaultTableModel model;
    public ManageEmployeeJPanel(JPanel userProcessContainer, Enterprise enterprise) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        //this.organizationDirectory = organizationDirectory;
        this.enterprise = enterprise;
        model = (DefaultTableModel) tableEmployee.getModel();
        populateOrganizationEmployeeComboBox();
        populateEmployeeRoleComboBox();
        populateTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnAddEmployee = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        btnBack = new javax.swing.JButton();
        orgEmpRoleComboBox = new javax.swing.JComboBox();
        jLabel5 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtEmpName = new javax.swing.JTextField();
        orgTypeComboBox = new javax.swing.JComboBox();
        jLabel6 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        lblValidUser = new javax.swing.JLabel();
        txtUser = new javax.swing.JTextField();
        lblValidPassword = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        txtPassword = new javax.swing.JPasswordField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableEmployee = new javax.swing.JTable();

        btnAddEmployee.setFont(new java.awt.Font("Lucida Grande", 1, 12)); // NOI18N
        btnAddEmployee.setText("Save");
        btnAddEmployee.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        btnAddEmployee.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddEmployeeActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Lucida Grande", 0, 14)); // NOI18N
        jLabel1.setText("Employee Type");

        btnBack.setText("back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Lucida Grande", 0, 14)); // NOI18N
        jLabel5.setText("Employee Name");

        jLabel2.setFont(new java.awt.Font("Lucida Grande", 0, 14)); // NOI18N
        jLabel2.setText("Organization");

        jLabel6.setFont(new java.awt.Font("Lucida Grande", 1, 18)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 51, 102));
        jLabel6.setText("Manage Employee");

        jLabel3.setFont(new java.awt.Font("Lucida Grande", 0, 14)); // NOI18N
        jLabel3.setText("Username");

        txtUser.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtUserKeyPressed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Lucida Grande", 0, 14)); // NOI18N
        jLabel4.setText("Password");

        txtPassword.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPasswordActionPerformed(evt);
            }
        });
        txtPassword.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtPasswordKeyPressed(evt);
            }
        });

        tableEmployee.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Organization", "Employee Role", "Name", "Username", "Password"
            }
        ));
        jScrollPane1.setViewportView(tableEmployee);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(310, 310, 310)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel1)
                            .addComponent(jLabel5)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4))
                        .addGap(101, 101, 101)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(orgEmpRoleComboBox, 0, 220, Short.MAX_VALUE)
                            .addComponent(orgTypeComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(txtEmpName)
                            .addComponent(txtUser)
                            .addComponent(txtPassword))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblValidUser, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblValidPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 290, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(44, 44, 44)
                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 243, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(561, 561, 561)
                        .addComponent(btnBack))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(166, 166, 166)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 664, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(425, 425, 425)
                        .addComponent(btnAddEmployee, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnBack, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(orgTypeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(orgEmpRoleComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(txtEmpName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txtUser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblValidUser, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(txtPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblValidPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(38, 38, 38)
                .addComponent(btnAddEmployee)
                .addGap(40, 40, 40)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(17, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnAddEmployeeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddEmployeeActionPerformed

        Organization organization = (Organization) orgTypeComboBox.getSelectedItem();

        UserAccountDirectory useraccountdirectory = organization.getUserAccountDirectory();
        String name = txtEmpName.getText();

        String username = txtUser.getText();
        String password = String.valueOf(txtPassword.getPassword());

        String empRole = orgEmpRoleComboBox.getSelectedItem().toString();

        int n = 0;
        Role role = null;

        switch (empRole) {

            case "TrashRemovalMan":
               
               n = 2;
               role = new TrashRemovalManRole();
               break;
           
           case "TrashRemovalManager":
               
               n = 3;
               role = new TrashRemovalManagerRole();
               break;
               
           case "ElectricityMaintainanceEmployee":
               
               n = 4;
               role = new ElectricityMaintainanceEmployeeRole();
               break;
               
           case "ElectricityMaintainanceManager":
               
               n = 5;
               role = new ElectricityMaintainanceManagerRole();
               break;
               
           case "SecurityDepartmentHead":
               
               n = 6;
               role = new  SecurityDepartmentHeadRole();
               break;
           
           case "SecurityGuard(":
               
               n = 7;
               role = new SecurityGuardRole();
               break;
               
           case "DrinkingWaterSupplyWorker":
               
               n = 8;
               role = new DrinkingWaterSupplyWorker();
               break;
               
           case "DrinkingWaterManager":
               
               n = 9;
               role = new DrinkingWaterManagerRole();
               break;
               
           case "NGOManager":
               
               n = 10;
               role = new NGOManagerRole();
               break;
               
           case "CommunitySecuritySupervisor":
               
               n = 11;
               role = new GovernmentManagerRole();
               break;
               
           case "Doctor":
               
               n = 12;
               role = new DoctorRole();
               break;
               
           case "ClinicManager":
               
               n = 13;
               role = new ClinicManagerRole();
               break;
               
               case "DisasterManagementManager":
               
               n = 14;
               role = new DisasterManagementManagerRole();
               break;
               
               case " DisasterManagementEmployee":
               
               n = 15;
               role = new DisasterManagementEmployeeRole();
               break;
        }

        for(Employee employee : organization.getEmployeeDirectory().getEmployeeList()){
            if(employee.getName().equals(name)){
                JOptionPane.showMessageDialog(null, "please input another name");
                return;
            }
        }

        ArrayList<String>usernamecheck = new ArrayList<>();
        for(UserAccount user: organization.getUserAccountDirectory().getUserAccountList())
        {
            usernamecheck.add(user.getUsername());

        }
        if(usernamecheck.contains(username))
        {
            JOptionPane.showMessageDialog(null,"UserName already exists");
            return;
        }
        if(username.isEmpty()||password.isEmpty())
        {
            JOptionPane.showMessageDialog(null,"Please enter a Valid input");
            return;
        }

        if(!validUsername(username)){
            JOptionPane.showMessageDialog(null,"Please enter a Valid username");
            return;
        }

        if(!validPassword(password)){
            JOptionPane.showMessageDialog(null,"Please enter a Valid password with more than 8 characters, 1 number, 1 capital letter and 1 special character");
            return;
        }

        // System.out.println(role);
        Employee employee = organization.getEmployeeDirectory().createEmployee(name,n);

        //System.out.println(employee.getRole());
        UserAccount userAccount = organization.getUserAccountDirectory().createUserAccount(username, password, employee, role);

        //        for (Organization organization1 : this.enterprise.getOrganizationDirectory().getOrganizationList()) {
            //            for (UserAccount userAccount1 : organization1.getUserAccountDirectory().getUserAccountList()) {
                //                System.out.println(this.enterprise.getName() + organization.getName() + userAccount1.getUsername());
                //            }
            //        }
        populateTable();
        orgEmpRoleComboBox.setSelectedIndex(0);
        orgTypeComboBox.setSelectedIndex(0);
        txtEmpName.setText("");
        txtUser.setText("");
        txtPassword.setText("");

    }//GEN-LAST:event_btnAddEmployeeActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed

        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_btnBackActionPerformed

    private void txtPasswordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPasswordActionPerformed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_txtPasswordActionPerformed

    private void txtPasswordKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPasswordKeyPressed
        // TODO add your handling code here:
        if (!validPassword(txtPassword.getText())) {
            txtPassword.setBorder(BorderFactory.createLineBorder(Color.RED));
            txtPassword.setForeground(Color.RED);
            lblValidPassword.setText("8 characters, atleast 1 capital letter, one number, one special character");
            
        } else {
            txtPassword.setBorder(BorderFactory.createLineBorder(Color.BLACK));
            txtPassword.setForeground(Color.BLACK);
            lblValidPassword.setText("Valid Password");
            int delay = 3000; //milliseconds
            ActionListener taskPerformer = new ActionListener() {
                public void actionPerformed(ActionEvent evt) {
                    lblValidPassword.setVisible(false);
                    
                }  
            };
            javax.swing.Timer tick = new javax.swing.Timer(delay, taskPerformer);
            tick.setRepeats(false);
            tick.start();
        }
    }//GEN-LAST:event_txtPasswordKeyPressed

    private void txtUserKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtUserKeyPressed
        // TODO add your handling code here:
        if (!validUsername(txtUser.getText())) {
            txtUser.setBorder(BorderFactory.createLineBorder(Color.RED));
            txtUser.setForeground(Color.RED);
            lblValidUser.setText("Invalid UserName..Only letters allowed");
        } else {
            txtUser.setBorder(BorderFactory.createLineBorder(Color.BLACK));
            txtUser.setForeground(Color.BLACK);
            lblValidUser.setText("Valid UserName");
            int delay = 3000; //milliseconds
            ActionListener taskPerformer = new ActionListener() {
                public void actionPerformed(ActionEvent evt) {
                    lblValidUser.setVisible(false);
                }  
            };
            javax.swing.Timer tick = new javax.swing.Timer(delay, taskPerformer);
            tick.setRepeats(false);
            tick.start();
        }
        
    }//GEN-LAST:event_txtUserKeyPressed
public void populateEmployeeRoleComboBox() {
        
        orgEmpRoleComboBox.removeAllItems();

        if (this.enterprise instanceof UtilityManagementEnterprise ) {
           
            orgEmpRoleComboBox.addItem("TrashRemovalManager");
            orgEmpRoleComboBox.addItem("TrashRemovalMan");
            orgEmpRoleComboBox.addItem("ElectricityMaintainanceManager");
            orgEmpRoleComboBox.addItem("ElectricityMaintainanceEmployee");
            orgEmpRoleComboBox.addItem("DrinkingWaterManager");
            orgEmpRoleComboBox.addItem("DrinkingWaterSupplyWorker");
            orgEmpRoleComboBox.addItem("SecurityDepartmentHead");
            orgEmpRoleComboBox.addItem("SecurityGuard");
        }
        if (this.enterprise instanceof MedicalHelpEnterprise) {
            
            orgEmpRoleComboBox.addItem("Government");
            orgEmpRoleComboBox.addItem("NGO");
            
            
        }
        if (this.enterprise instanceof SafetyEnterprise) {
            orgEmpRoleComboBox.addItem("SecurityDepartmentHead");
            orgEmpRoleComboBox.addItem("SecurityGaurd");
            orgEmpRoleComboBox.addItem("Doctor");
            orgEmpRoleComboBox.addItem("Clinic Manager");
        }

    }

    public void populateOrganizationEmployeeComboBox() {
        
        orgTypeComboBox.removeAllItems();

        for (Organization organization : this.enterprise.getOrganizationDirectory().getOrganizationList()) {
            orgTypeComboBox.addItem(organization);
        }
    }
    
    private void populateTable() {
        

        model.setRowCount(0);
        for (Organization organization : this.enterprise.getOrganizationDirectory().getOrganizationList()) {
            System.out.println(organization + "org");
            for (UserAccount useraccount : organization.getUserAccountDirectory().getUserAccountList()) {
//                System.out.println(useraccount + "user");
//                System.out.println(useraccount.getEmployee().getOrg() + "org");
//                System.out.println(useraccount.getEmployee().getRole() + "role");
//                System.out.println(useraccount.getEmployee().getName() + "name");
//                System.out.println(useraccount.getUsername() + "username");
//                System.out.println(useraccount.getPassword() + "password");
//                
                Object[] objs = {useraccount.getEmployee().getOrg(), useraccount.getEmployee().getRole(),
                useraccount.getEmployee().getName(),useraccount.getUsername(),useraccount.getPassword()};
                        
                model.addRow(objs);
            }
        }

    }
    public static boolean validUsername(String name) {
        Pattern pattern;
        Matcher matcher;
        String NAME_PATTERN = "^[A-Za-z\\s]+$";
        pattern = Pattern.compile(NAME_PATTERN);
        matcher = pattern.matcher(name);
        return matcher.matches();
    }
        

    public static boolean validPassword(String passwordValue) {
        Pattern pattern;
        Matcher matcher;
        String PASSWORD_PATTERN
                = "^(?=.[0-9])(?=.[a-z])(?=.[A-Z])(?=.[!@#$%^&+=~|?])(?=\\S+$).{8,}$";
        pattern = Pattern.compile(PASSWORD_PATTERN);
        matcher = pattern.matcher(passwordValue);
        return matcher.matches();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddEmployee;
    private javax.swing.JButton btnBack;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblValidPassword;
    private javax.swing.JLabel lblValidUser;
    private javax.swing.JComboBox orgEmpRoleComboBox;
    private javax.swing.JComboBox orgTypeComboBox;
    private javax.swing.JTable tableEmployee;
    private javax.swing.JTextField txtEmpName;
    private javax.swing.JPasswordField txtPassword;
    private javax.swing.JTextField txtUser;
    // End of variables declaration//GEN-END:variables
}
